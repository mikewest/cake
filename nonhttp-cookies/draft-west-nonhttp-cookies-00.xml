<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.36 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-west-nonhttp-cookies-00" category="std" updates="6265">

  <front>
    <title>Non-HTTP Cookies</title>

    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
      <address>
        <email>mkwst@google.com</email>
        <uri>https://mikewest.org/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    <workgroup>HTTPbis</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document updates RFC6265 by defining a <spanx style="verb">NonHttp</spanx> attribute which ensures
that a given cookie is available only to “non-HTTP” APIs. Yes, it is a little
strange for “HTTP State Management” to support exclusively non-HTTP use cases,
but the internet is a strange place. So it goes.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Cookies violate the same-origin policy in well-understood ways, outlined in
Sections 8.5 and 8.6 of <xref target="RFC6265"/>. For better or worse, developers rely on
this behavior in a number of ways. In particular, it is quite common for
developers to use cookies as a cross-origin storage mechanism, allowing state
to be shared across all origins in a given registrable domain. A user who
signs into <spanx style="verb">https://m.example.com/</spanx> might expect to also be signed into
<spanx style="verb">https://www.example.com/</spanx>, and vice-versa. Servers can support this expectation
by setting a cookie at the apex domain: <spanx style="verb">uid=1234567;Secure;Domain=example.com</spanx>.
The cookie will be sent along with HTTP requests to both origins, and the user’s
state can be maintained.</t>

<t>Often, though, the fact that a cookie is sent over the wire is an unindended
side-effect. Developers may simply desire the ability to easily share
client-side state between related origins, and have pressed cookies into this
service.</t>

<t>For example, web analytics packages might use a user agent’s <spanx style="verb">document.cookie</spanx>
API to set first-party cookies on a client’s site that retain a user’s state.
This gives them the information they need to do analytics work, but has the very
unfortunate side-effect of sending those cookies along with first-party HTTP
requests to the client’s server. This has a substantially negative impact on
request size (and therefore performance), but also has privacy implications, as
these cookies are often sent in plaintext over the network.</t>

<t>This document aims to reduce both impacts by allowing developers to specify
specific cookies as <spanx style="verb">NonHttp</spanx>. These cookies cannot be modified via <spanx style="verb">Set-Cookie</spanx>
HTTP response headers, nor will they be included in <spanx style="verb">Cookie</spanx> HTTP request
headers. They are only accessible via “non-HTTP” APIs.</t>

<section anchor="examples" title="Examples">

<t>Non-HTTP cookies are only accessible via “non-HTTP” APIs. For example, a
developer might use HTML’s <spanx style="verb">document.cookie</spanx> to set a non-HTTP cookie as
follows:</t>

<figure><artwork><![CDATA[
document.cookie = "name=value; Secure; NonHttp";
]]></artwork></figure>

<t>That cookie would be available via subsequent calls to <spanx style="verb">document.cookie</spanx>, but
will not be included in HTTP requests to the developer’s server.</t>

</section>
</section>
<section anchor="terminology-and-notation" title="Terminology and notation">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="recommendations" title="Recommendations">

<t>This section describes extensions to <xref target="RFC6265"/> necessary to implement the
<spanx style="verb">NonHttp</spanx> attribute.</t>

<t><list style="numbers">
  <t>Extend the <spanx style="verb">cookie-av</spanx> grammar in Section 4.1.1 of <xref target="RFC6265"/> as follows:  <vspace blankLines='1'/>
    <figure><artwork type="abnf"><![CDATA[
cookie-av      = expires-av / max-age-av / domain-av /
                 path-av / secure-av / httponly-av /
                 nohttp-av / extension-av
nohttp-av      = "NoHttp"
]]></artwork></figure>
  </t>
  <t>Add a section to Section 4.1.2 of <xref target="RFC6265"/> describing the semantics of
the <spanx style="verb">NonHttp</spanx> attribute as follows:  <vspace blankLines='1'/>
The <spanx style="verb">NonHttp</spanx> attribute limits the scope of the cookie to “non-HTTP” APIs.
That is, the attribute instructs the user agent to omit the cookie when
constructing a <spanx style="verb">Cookie</spanx> header for an HTTP request.  <vspace blankLines='1'/>
If both the <spanx style="verb">NonHttp</spanx> and <spanx style="verb">HttpOnly</spanx> attributes are present when setting a
cookie, the cookie will be ignored, regardless of its delivery mechanism.</t>
  <t>Alter the storage model defined in Section 5.3 of <xref target="RFC6265"/> as follows:  <list style="numbers">
      <t>Add <spanx style="verb">no-http-flag</spanx> as a field to be stored on each cookie.</t>
      <t>Insert the following two steps after the current step 10:      <list style="numbers">
          <t>If the <spanx style="verb">cookie-attribute-list</spanx> contains an attribute with an
<spanx style="verb">attribute-name</spanx> of “NoHttp”, set the cookie’s <spanx style="verb">no-http-flag</spanx> to
<spanx style="verb">true</spanx>. Otherwise, set the cookie’s <spanx style="verb">no-http-flag</spanx> to <spanx style="verb">false</spanx>.</t>
          <t>If the cookie was not received from a “non-HTTP” API, and the
cookie’s <spanx style="verb">no-http-flag</spanx> is <spanx style="verb">true</spanx>, abort these steps and ignore
the cookie entirely.</t>
        </list></t>
      <t>Insert the following step after the current step 11.2:      <list style="numbers">
          <t>If the newly created cookie was not received from a “non-HTTP” API,
and the <spanx style="verb">old-cookie</spanx>’s <spanx style="verb">no-http-flag</spanx> is <spanx style="verb">true</spanx>, abort these steps
and ignore the newly created cookie entirely.</t>
        </list></t>
    </list></t>
  <t>Add a section to Section 5.2 of <xref target="RFC6265"/> describing the processing 
requirements for the <spanx style="verb">NonHttp</spanx> attribute as follows:  <vspace blankLines='1'/>
If the <spanx style="verb">attribute-name</spanx> case-insensitively matches the string “NonHttp”,
the user agent MUST append an attribute to the <spanx style="verb">cookie-attribute-list</spanx> with
an <spanx style="verb">attribute-name</spanx> of <spanx style="verb">NonHttp</spanx> and an empty <spanx style="verb">attribute-value</spanx>.</t>
  <t>Alter the <spanx style="verb">Cookie</spanx> header generation in Section 5.4 of <xref target="RFC6265"/> as
follows:  <list style="numbers">
      <t>Add the following requirement to the list of requirements in the current
step 1:      <list style="symbols">
          <t>If the cookie’s <spanx style="verb">no-http-flag</spanx> is <spanx style="verb">true</spanx>, then exclude the cookie if
the <spanx style="verb">cookie-string</spanx> is not being generated for a “non-HTTP” API (as
defined by the user agent).</t>
        </list></t>
    </list></t>
</list></t>

</section>
<section anchor="security-and-privacy-considerations" title="Security and Privacy Considerations">

<section anchor="cross-origin-storage-capabilities" title="Cross-origin storage capabilities">

<t>There’s a risk that allowing developers to suppress cookies from HTTP requests
might lead to increased usage of cookies as a cross-origin storage mechanism.
Given existing usage, however, the worst case seems to be an increase from a
high number to a marginally higher number.</t>

<t>Note, though, that the capabilities provided here can already be obtained
through clever use of the <spanx style="verb">path</spanx> attribute to scope cookies down to paths that
aren’t frequently requested. These cookies can be accessed through clever use
of <spanx style="verb">&lt;iframe&gt;</spanx> elements and the <spanx style="verb">history.pushState</spanx> API.</t>

<t>The flag introduced here makes that mechanism significantly simpler, but does
not introduce fundamentally new capabilities.</t>

</section>
<section anchor="fewer-cookies-on-the-wire" title="Fewer Cookies on the Wire">

<t>Non-HTTP cookies are never sent directly by the user agent over the network,
which reduces their exposure to both active and passive network attackers. It
seems reasonable to expect that adoption of the <spanx style="verb">NonHttp</spanx> attribute by popular
analytics packages could result in a substantial reduction in the usefulness of
those packages’ cookies when attempting to correlate a given user’s activities
over time and across networks.</t>

</section>
<section anchor="legacy-clients" title="Legacy Clients">

<t>Clients that do not support the <spanx style="verb">NonHttp</spanx> flag will fall back to the existing
behavior: cookies with the flag will be accepted via any delivery mechanism,
and will continue to be sent out with matching HTTP requests.</t>

<t>Developers can use this behavior to feature-detect support for the flag: sending
<spanx style="verb">Set-Cookie: nonhttp-support=0; NonHttp</spanx> will allow server-side detection by
parsing the <spanx style="verb">Cookie</spanx> header sent with requests, and client-side detection via
code like <spanx style="verb">document.cookie.match('nonhttp-support=0')</spanx>.</t>

</section>
</section>
<section anchor="aesthetic-considerations" title="Aesthetic Considerations">

<section anchor="isnt-domonly-a-better-name-or-nohttp-or-insert-bikeshed-here" title="Isn’t  a better name? Or ? Or ?"><spanx style="verb">DOMOnly</spanx><spanx style="verb">NoHttp</spanx><spanx style="verb">Insert Bikeshed Here</spanx>

<t><spanx style="verb">DOMOnly</spanx> is probably a better fit for the practical implications of this API.
<spanx style="verb">DocumentCookieOnly</spanx> is even more clear. This document runs with <spanx style="verb">NonHttp</spanx> to
match RFC 6265’s existing language around “non-HTTP” APIs, and to avoid
arguments about software that handles cookies, but doesn’t work with a DOM or
any particular JavaScript interface. Bikeshedding is, of course, welcome.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor='RFC6265' target='http://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>




    </references>



<section anchor="acknowledgements" title="Acknowledgements">

<t>Michael Nordman suggested this approach during a conversation about cross-origin
storage mechanisms. Brad Townsend helped me understand the potential positive
impact on traffic levels for analytics customers.</t>

</section>


  </back>
</rfc>

